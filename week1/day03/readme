🎯 Day 3 목표

함수 정의 및 호출: 코드 재사용
값 전달 vs 참조 전달 이해
기본 포인터 문법 이해: 주소, 간접 참조
포인터와 배열 관계 이해
✅ 1. 함수 기본 구조

int add(int a, int b) {
    return a + b;
}

int main() {
    int result = add(3, 5);
    cout << "Result = " << result << endl;
}
🔑 개념
int add(int a, int b)는 리턴값이 int인 함수
함수는 main() 외부에 정의할 수 있음
return으로 결과 반환
✅ 2. 값 전달 vs 참조 전달

void square(int x) {
    x = x * x;
}

void square_ref(int& x) {
    x = x * x;
}
square(x)는 복사본 → 원본은 바뀌지 않음
square_ref(x)는 참조 → 원본이 바뀜
int main() {
    int num = 5;
    square(num);        // num은 여전히 5
    square_ref(num);    // num은 25로 바뀜
}
✅ 3. 포인터 문법 기초

int x = 10;
int* p = &x;         // x의 주소 저장
cout << *p << endl;  // 간접 참조 (10 출력)
문법	의미
*p	포인터가 가리키는 값
&x	변수 x의 주소
✅ 4. 배열과 포인터

int arr[3] = {1, 2, 3};
cout << arr[0] << " == " << *arr << endl;
arr는 int* 타입으로 첫 번째 원소 주소
arr + 1은 arr[1]의 주소
📚 Day 3 연습문제

각 문제는 /week1/day03/에 q1.cpp ~ q4.cpp로 저장해줘

✅ Q1. max() 함수 만들기
파일명: q1.cpp

두 정수를 입력받아 더 큰 값을 반환하는 함수 int max(int a, int b) 정의
main()에서 사용하여 출력
✅ Q2. 제곱 함수 만들기 (값 전달 vs 참조 전달 비교)
파일명: q2.cpp

함수 1: void square(int x)
함수 2: void square_ref(int& x)
둘 다 실행해보고 결과 비교 출력
✅ Q3. 포인터를 이용한 값 출력
파일명: q3.cpp

정수 하나 입력받고, 포인터를 이용해 그 값을 출력
포인터 주소도 함께 출력
✅ Q4. 포인터로 배열의 합 구하기
파일명: q4.cpp

크기 5인 배열 선언
사용자로부터 5개 정수 입력
포인터를 이용해 배열 원소들의 합 계산